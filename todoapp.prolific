Creating your first React App

### Why?
1. We're going to get started by building a fairly simple app to-do list app using React.
1. Ultimately the functionality we're aiming for is the ability to add items to the list and check off items.
1. Through this process, we'll walk through implementing the key concepts that we've discussed so far.

### How?
1. The best way to have a quick and reliable React boilerplate is to install [create-react-app](https://facebook.github.io/create-react-app/).
1. Start by running `npx create-react-app todo_list_app` and cd into the folder created. Run `yarn start` to kick off the development server.

### Expected Result
1. When navigating to `http://localhost:3000/`, you should see the React logo. This is your application! We'll edit the app in our next story to start our to-do list app.

### Resources
1. [Create React App Docs](https://facebook.github.io/create-react-app/docs/getting-started)

---

Setting up your app

### Why?
1. The app that is given to us by Create React App is fairly generic, so we're going to adjust it to give our filenames more meaning.

### Application Structure
1. First let's change the name of the files called `App` to `ToDoList`.
1. Next, if you navigate to `ToDoList.js`, you'll see the beginnings of a component called `App`. Note that this is a functional component, and we're going to use a class component as it's more common in the Apps Manager codebase right now.
1. Swap the class declaration for the line `class ToDoList extends React.Component`, and add in your render method. Have it return a simple string for now.
1. Note that you'll also need to swap out the CSS import, as we've changed the name of the file.

1. Next we need to render the component we've just defined at the entry point for our web app, which is `index.js`.
1. Navigating to this page in your app source code, you'll see the `ReactDOM.render` method being called with `<App />`. Let's swap this out for `<ToDoList />`, and change the import associated with it.

### Expected Result
1. If you've started up your app locally, you should see the string you've put in your `ToDoList` component's render method on the screen.

---

Building out the to do list

### Why?
1. Before we worry about being able to add items to our To Do list dynamically, let's build out a list with some filler values

### How?
1. Inside our `render` function, create a list with three items worth of checkboxes. For details on how checkboxes work in React, look at the resources below.
1. This is also a great chance to experiment with some CSS if you don't have much experience with it, to get your list looking the way you want it to.

### Expected Result
1. You should now see a list of items of your choices with checkboxes next to them.

### Resources
1. [Documentation on React checkboxes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/checkbox)
1. [Quick overview of CSS basics](https://www.freecodecamp.org/news/get-started-with-css-in-5-minutes-e0804813fc3e/)
1. [List of CSS Properties](https://www.w3schools.com/cssref/)

---

Splitting out a secondary component

### Why?
Componentizing aspects of the code allows us to reuse that bit of code rather than duplicating code

### How?
1. Let's put this component in its own file called `ListItem.js`
1. If you want this component to be available to other components, we have to export it in the application definition:
`export default class ListItem extends Component`
1. If you use the `default` keyword, you can then import the component using the syntax `import ListItem from '../list_item.js'`
1. If you omit the `default` keyword, you then import the component using the syntax `import {ListItem} from '../list_item.js'`

### Expected Result
1. This essentially constitutes a refactor, and therefore should not result in any visual changes in your app.

---

Component State

### Why?
Our appliction will need to have the list items that should be rendered in our list at its disposal.

### How?
1. Our constructor should initialize state as an object with a key for our list items, corresponding to an empty array.
1. Let's transition our filler items from direct inputs to state elements.
1. At this stage, it will also be easier to map over the elements in state, if you haven't already, rather than indexing in to each element of the state
1. For those more familiar with back end languages, mapping over a list is similar to using a for loop to do something for every element of a list

### Expected Result
1. This is another refactor, so you should again not see any change in your app

### Resources
1. [React Component State Documentation](https://reactjs.org/docs/faq-state.html)
1. [Looping through arrays in React](https://medium.com/javascript-in-plain-english/how-to-loop-through-arrays-in-react-3eaa8a14445)

---

[RELEASE] Creating your first React app â‡§
