Creating your first React App

### Why?
- We're going to get started by building a fairly simple app to-do list app using React.
- Ultimately the functionality we're aiming for is the ability to add items to the list and check off items.
- Through this process, we'll walk through implementing the key concepts that we've discussed so far.

### How?
- The best way to have a quick and reliable React boilerplate is to install [create-react-app](https://facebook.github.io/create-react-app/).
- Start by running `npx create-react-app todo_list_app` and cd into the folder created. Run `yarn start` to kick off the development server.

### Expected Result
- When navigating to `http://localhost:3000/`, you should see the React logo. This is your application! We'll edit the app in our next story to start our to-do list app.

### Resources
- [Create React App Docs](https://facebook.github.io/create-react-app/docs/getting-started)

---

Setting up your app

### Why?
- The app that is given to us by Create React App is fairly generic, so we're going to adjust it to give our filenames more meaning.

### Application Structure
- First let's change the name of the files called `App` to `ToDoList`.
- Next, if you navigate to `ToDoList.js`, you'll see the beginnings of a component called `App`. Note that this is a functional component, and we're going to use a class component as it's more common in the Apps Manager codebase right now.
- Swap the class declaration for the line `class ToDoList extends React.Component`, and add in your render method. Have it return a simple string for now.
- Note that you'll also need to swap out the CSS import, as we've changed the name of the file.

- Next we need to render the component we've just defined at the entry point for our web app, which is `index.js`.
- Navigating to this page in your app source code, you'll see the `ReactDOM.render` method being called with `<App />`. Let's swap this out for `<ToDoList />`, and change the import associated with it.

### Expected Result
- If you've started up your app locally, you should see the string you've put in your `ToDoList` component's render method on the screen.

---

Building out the to do list

### Why?
- Before we worry about being able to add items to our To Do list dynamically, let's build out a list with some filler values

### How?
- Inside our `render` function, create a list with three items worth of checkboxes. For details on how checkboxes work in React, look at the resources below.
- This is also a great chance to experiment with some CSS if you don't have much experience with it, to get your list looking the way you want it to.

### Expected Result
- You should now see a list of items of your choices with checkboxes next to them.

### Resources
- [Documentation on React checkboxes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/checkbox)
- [Quick overview of CSS basics](https://www.freecodecamp.org/news/get-started-with-css-in-5-minutes-e0804813fc3e/)
- [List of CSS Properties](https://www.w3schools.com/cssref/)

---

Splitting out a secondary component and using props

### Why?
Componentizing aspects of the code allows us to reuse that bit of code rather than duplicating code

### How?
- Let's put this component in its own file called `ListItem.js`. Consider what elements of the list item would be helpful to have coming through as props.
- If you want this component to be available to other components, we have to export it in the application definition: `export default class ListItem extends Component`
- If you use the `default` keyword, you can then import the component using the syntax `import ListItem from '../list_item.js'`
- If you omit the `default` keyword, you then import the component using the syntax `import {ListItem} from '../list_item.js'`

### Expected Result
- This essentially constitutes a refactor, and therefore should not result in any visual changes in your app.
- In your code, we now expect to see `<ListItem>` tags rather than `<input>` tags.

---

Component State

### Why?
Our appliction will need to have the list items that should be rendered in our list at its disposal.

### How?
- Our constructor should initialize state as an object with a key for our list items, corresponding to an empty array.
- Let's transition our filler items from direct inputs to state elements.
- At this stage, it will also be easier to map over the elements in state, if you haven't already, rather than indexing in to each element of the state
- For those more familiar with back end languages, mapping over a list is similar to using a for loop to do something for every element of a list

### Expected Result
- This is another refactor, so you should again not see any change in your app.
- In your code, the data that makes a list item unique should now be in state.

### Resources
- [React Component State Documentation](https://reactjs.org/docs/faq-state.html)
- [Looping through arrays in React](https://medium.com/javascript-in-plain-english/how-to-loop-through-arrays-in-react-3eaa8a14445)

---

Configurability

### Why?
- At this stage we have a to do list app that's fairly useless, given that it only shows our filler values. Let's add a form to make the list more dynamic.

### How?
- We need a simple form that consists of an text input and a submit button
- When that submit button is clicked, we should take the value in the text input and add it to our state as a list item, as well as clear out the input
- A great way to keep track of the value of the input is to put it in state.
- There's a tutorial in the resources below around building out a simple form if you need help getting started.

### Bonus Functionality
- There are many ways you could continue to enhance the functionality of the form at this point if you feel like exploring more.
- For example, consider adding a button to clear out the text input, or clear out the entire to do list. Consider disabling the submit button for the text input if it is an empty string.

### Expected Result
- We should now start with an empty list that we can add items to - congrats we have a functional form!

### Resources
- [Simple Forms in React](https://vegibit.com/a-simple-react-js-form-example/)

---

Bonus: Stylistic Details

### Why?
- Your to do list should now be fully functional! But purely functional does not make for great design.
- To give users a better sense of what items have been checked off, we can add styling to the list items that have been checked off, for example by adding a classname that makes the text gray and puts a line through it.

### How?
- Consider how you might know whether a list item is checked off or not, and how to dynamically add classnames based on that knowledge (there's a resource below that will help!)

### Expected Result
- When list items are checked off, there should now be additional styling to give users a visual representation of what tasks have been completed.
- At this point you've officially created your first React app, and walked through a lot of concepts along the way. Hopefully you've learned a lot, and if you'd like to try stepping through more React projects there are plenty of tutorials around the internet.

### Resources
- [Dynamic classnames library](https://www.npmjs.com/package/classnames)

---

[RELEASE] Creating your first React app â‡§
